// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cam_interface.proto

#include "cam_interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cam_5finterface_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cam_5finterface_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BasicVehicleContainerLowFrequency;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cam_5finterface_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_BasicVehicleContainerHighFrequency;
}  // namespace protobuf_cam_5finterface_2eproto
namespace protobuf_etsi_5fits_5fcdd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Curvature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Heading;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LongitudinalAcceleration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Speed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleLength;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleWidth;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_YawRate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_etsi_5fits_5fcdd_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ReferencePosition;
}  // namespace protobuf_etsi_5fits_5fcdd_2eproto
namespace protobuf_itspduheader_5finterface_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_itspduheader_5finterface_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ItsPduHeader;
}  // namespace protobuf_itspduheader_5finterface_2eproto
class CAMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAMessage>
      _instance;
} _CAMessage_default_instance_;
class BasicVehicleContainerHighFrequencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicVehicleContainerHighFrequency>
      _instance;
} _BasicVehicleContainerHighFrequency_default_instance_;
class BasicVehicleContainerLowFrequencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicVehicleContainerLowFrequency>
      _instance;
} _BasicVehicleContainerLowFrequency_default_instance_;
namespace protobuf_cam_5finterface_2eproto {
static void InitDefaultsCAMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAMessage_default_instance_;
    new (ptr) ::CAMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CAMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCAMessage}, {
      &protobuf_itspduheader_5finterface_2eproto::scc_info_ItsPduHeader.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_ReferencePosition.base,
      &protobuf_cam_5finterface_2eproto::scc_info_BasicVehicleContainerHighFrequency.base,
      &protobuf_cam_5finterface_2eproto::scc_info_BasicVehicleContainerLowFrequency.base,}};

static void InitDefaultsBasicVehicleContainerHighFrequency() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BasicVehicleContainerHighFrequency_default_instance_;
    new (ptr) ::BasicVehicleContainerHighFrequency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BasicVehicleContainerHighFrequency::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_BasicVehicleContainerHighFrequency =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsBasicVehicleContainerHighFrequency}, {
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_Heading.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_Speed.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_VehicleLength.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_VehicleWidth.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_LongitudinalAcceleration.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_Curvature.base,
      &protobuf_etsi_5fits_5fcdd_2eproto::scc_info_YawRate.base,}};

static void InitDefaultsBasicVehicleContainerLowFrequency() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BasicVehicleContainerLowFrequency_default_instance_;
    new (ptr) ::BasicVehicleContainerLowFrequency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BasicVehicleContainerLowFrequency::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BasicVehicleContainerLowFrequency =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBasicVehicleContainerLowFrequency}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CAMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicVehicleContainerHighFrequency.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicVehicleContainerLowFrequency.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, generation_delta_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, station_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, reference_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, high_frequency_container_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CAMessage, low_frequency_container_),
  0,
  4,
  5,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, drive_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, vehicle_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, vehicle_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, longitudinal_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, curvature_calculation_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerHighFrequency, yaw_rate_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  8,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerLowFrequency, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerLowFrequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicVehicleContainerLowFrequency, temp2_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CAMessage)},
  { 17, 31, sizeof(::BasicVehicleContainerHighFrequency)},
  { 40, 46, sizeof(::BasicVehicleContainerLowFrequency)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CAMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BasicVehicleContainerHighFrequency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BasicVehicleContainerLowFrequency_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cam_interface.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023cam_interface.proto\032\034itspduheader_inte"
      "rface.proto\032\022etsi_its_cdd.proto\"\251\002\n\tCAMe"
      "ssage\022\035\n\006header\030\001 \002(\0132\r.ItsPduHeader\022\035\n\025"
      "generation_delta_time\030\002 \002(\004\022\"\n\014station_t"
      "ype\030\003 \002(\0162\014.StationType\022.\n\022reference_pos"
      "ition\030\004 \002(\0132\022.ReferencePosition\022E\n\030high_"
      "frequency_container\030\005 \002(\0132#.BasicVehicle"
      "ContainerHighFrequency\022C\n\027low_frequency_"
      "container\030\006 \001(\0132\".BasicVehicleContainerL"
      "owFrequency\"\206\003\n\"BasicVehicleContainerHig"
      "hFrequency\022\031\n\007heading\030\001 \002(\0132\010.Heading\022\025\n"
      "\005speed\030\002 \002(\0132\006.Speed\022(\n\017drive_direction\030"
      "\003 \002(\0162\017.DriveDirection\022&\n\016vehicle_length"
      "\030\004 \002(\0132\016.VehicleLength\022$\n\rvehicle_width\030"
      "\005 \002(\0132\r.VehicleWidth\022<\n\031longitudinal_acc"
      "eleration\030\006 \002(\0132\031.LongitudinalAccelerati"
      "on\022\035\n\tcurvature\030\007 \002(\0132\n.Curvature\022=\n\032cur"
      "vature_calculation_mode\030\010 \002(\0162\031.Curvatur"
      "eCalculationMode\022\032\n\010yaw_rate\030\t \002(\0132\010.Yaw"
      "Rate\"2\n!BasicVehicleContainerLowFrequenc"
      "y\022\r\n\005temp2\030\001 \001(\rP\000P\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 820);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cam_interface.proto", &protobuf_RegisterTypes);
  ::protobuf_itspduheader_5finterface_2eproto::AddDescriptors();
  ::protobuf_etsi_5fits_5fcdd_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cam_5finterface_2eproto

// ===================================================================

void CAMessage::InitAsDefaultInstance() {
  ::_CAMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::ItsPduHeader*>(
      ::ItsPduHeader::internal_default_instance());
  ::_CAMessage_default_instance_._instance.get_mutable()->reference_position_ = const_cast< ::ReferencePosition*>(
      ::ReferencePosition::internal_default_instance());
  ::_CAMessage_default_instance_._instance.get_mutable()->high_frequency_container_ = const_cast< ::BasicVehicleContainerHighFrequency*>(
      ::BasicVehicleContainerHighFrequency::internal_default_instance());
  ::_CAMessage_default_instance_._instance.get_mutable()->low_frequency_container_ = const_cast< ::BasicVehicleContainerLowFrequency*>(
      ::BasicVehicleContainerLowFrequency::internal_default_instance());
}
void CAMessage::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void CAMessage::clear_reference_position() {
  if (reference_position_ != NULL) reference_position_->Clear();
  clear_has_reference_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAMessage::kHeaderFieldNumber;
const int CAMessage::kGenerationDeltaTimeFieldNumber;
const int CAMessage::kStationTypeFieldNumber;
const int CAMessage::kReferencePositionFieldNumber;
const int CAMessage::kHighFrequencyContainerFieldNumber;
const int CAMessage::kLowFrequencyContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAMessage::CAMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cam_5finterface_2eproto::scc_info_CAMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAMessage)
}
CAMessage::CAMessage(const CAMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ItsPduHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reference_position()) {
    reference_position_ = new ::ReferencePosition(*from.reference_position_);
  } else {
    reference_position_ = NULL;
  }
  if (from.has_high_frequency_container()) {
    high_frequency_container_ = new ::BasicVehicleContainerHighFrequency(*from.high_frequency_container_);
  } else {
    high_frequency_container_ = NULL;
  }
  if (from.has_low_frequency_container()) {
    low_frequency_container_ = new ::BasicVehicleContainerLowFrequency(*from.low_frequency_container_);
  } else {
    low_frequency_container_ = NULL;
  }
  ::memcpy(&generation_delta_time_, &from.generation_delta_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&station_type_) -
    reinterpret_cast<char*>(&generation_delta_time_)) + sizeof(station_type_));
  // @@protoc_insertion_point(copy_constructor:CAMessage)
}

void CAMessage::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&station_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(station_type_));
}

CAMessage::~CAMessage() {
  // @@protoc_insertion_point(destructor:CAMessage)
  SharedDtor();
}

void CAMessage::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete reference_position_;
  if (this != internal_default_instance()) delete high_frequency_container_;
  if (this != internal_default_instance()) delete low_frequency_container_;
}

void CAMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CAMessage::descriptor() {
  ::protobuf_cam_5finterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cam_5finterface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAMessage& CAMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cam_5finterface_2eproto::scc_info_CAMessage.base);
  return *internal_default_instance();
}


void CAMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CAMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reference_position_ != NULL);
      reference_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(high_frequency_container_ != NULL);
      high_frequency_container_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(low_frequency_container_ != NULL);
      low_frequency_container_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&generation_delta_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&station_type_) -
        reinterpret_cast<char*>(&generation_delta_time_)) + sizeof(station_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ItsPduHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 generation_delta_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_generation_delta_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &generation_delta_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .StationType station_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StationType_IsValid(value)) {
            set_station_type(static_cast< ::StationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ReferencePosition reference_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_frequency_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BasicVehicleContainerLowFrequency low_frequency_container = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_frequency_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAMessage)
  return false;
#undef DO_
}

void CAMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ItsPduHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // required uint64 generation_delta_time = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->generation_delta_time(), output);
  }

  // required .StationType station_type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->station_type(), output);
  }

  // required .ReferencePosition reference_position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_reference_position(), output);
  }

  // required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_high_frequency_container(), output);
  }

  // optional .BasicVehicleContainerLowFrequency low_frequency_container = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_low_frequency_container(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAMessage)
}

::google::protobuf::uint8* CAMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ItsPduHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // required uint64 generation_delta_time = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->generation_delta_time(), target);
  }

  // required .StationType station_type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->station_type(), target);
  }

  // required .ReferencePosition reference_position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_reference_position(), deterministic, target);
  }

  // required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_high_frequency_container(), deterministic, target);
  }

  // optional .BasicVehicleContainerLowFrequency low_frequency_container = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_low_frequency_container(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAMessage)
  return target;
}

size_t CAMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CAMessage)
  size_t total_size = 0;

  if (has_header()) {
    // required .ItsPduHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (has_reference_position()) {
    // required .ReferencePosition reference_position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reference_position_);
  }

  if (has_high_frequency_container()) {
    // required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *high_frequency_container_);
  }

  if (has_generation_delta_time()) {
    // required uint64 generation_delta_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->generation_delta_time());
  }

  if (has_station_type()) {
    // required .StationType station_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->station_type());
  }

  return total_size;
}
size_t CAMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required .ItsPduHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

    // required .ReferencePosition reference_position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reference_position_);

    // required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *high_frequency_container_);

    // required uint64 generation_delta_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->generation_delta_time());

    // required .StationType station_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->station_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .BasicVehicleContainerLowFrequency low_frequency_container = 6;
  if (has_low_frequency_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *low_frequency_container_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CAMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAMessage)
    MergeFrom(*source);
  }
}

void CAMessage::MergeFrom(const CAMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::ItsPduHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reference_position()->::ReferencePosition::MergeFrom(from.reference_position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_high_frequency_container()->::BasicVehicleContainerHighFrequency::MergeFrom(from.high_frequency_container());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_low_frequency_container()->::BasicVehicleContainerLowFrequency::MergeFrom(from.low_frequency_container());
    }
    if (cached_has_bits & 0x00000010u) {
      generation_delta_time_ = from.generation_delta_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      station_type_ = from.station_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAMessage::CopyFrom(const CAMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_reference_position()) {
    if (!this->reference_position_->IsInitialized()) return false;
  }
  if (has_high_frequency_container()) {
    if (!this->high_frequency_container_->IsInitialized()) return false;
  }
  return true;
}

void CAMessage::Swap(CAMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAMessage::InternalSwap(CAMessage* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(reference_position_, other->reference_position_);
  swap(high_frequency_container_, other->high_frequency_container_);
  swap(low_frequency_container_, other->low_frequency_container_);
  swap(generation_delta_time_, other->generation_delta_time_);
  swap(station_type_, other->station_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CAMessage::GetMetadata() const {
  protobuf_cam_5finterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cam_5finterface_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasicVehicleContainerHighFrequency::InitAsDefaultInstance() {
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->heading_ = const_cast< ::Heading*>(
      ::Heading::internal_default_instance());
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->speed_ = const_cast< ::Speed*>(
      ::Speed::internal_default_instance());
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->vehicle_length_ = const_cast< ::VehicleLength*>(
      ::VehicleLength::internal_default_instance());
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->vehicle_width_ = const_cast< ::VehicleWidth*>(
      ::VehicleWidth::internal_default_instance());
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->longitudinal_acceleration_ = const_cast< ::LongitudinalAcceleration*>(
      ::LongitudinalAcceleration::internal_default_instance());
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->curvature_ = const_cast< ::Curvature*>(
      ::Curvature::internal_default_instance());
  ::_BasicVehicleContainerHighFrequency_default_instance_._instance.get_mutable()->yaw_rate_ = const_cast< ::YawRate*>(
      ::YawRate::internal_default_instance());
}
void BasicVehicleContainerHighFrequency::clear_heading() {
  if (heading_ != NULL) heading_->Clear();
  clear_has_heading();
}
void BasicVehicleContainerHighFrequency::clear_speed() {
  if (speed_ != NULL) speed_->Clear();
  clear_has_speed();
}
void BasicVehicleContainerHighFrequency::clear_vehicle_length() {
  if (vehicle_length_ != NULL) vehicle_length_->Clear();
  clear_has_vehicle_length();
}
void BasicVehicleContainerHighFrequency::clear_vehicle_width() {
  if (vehicle_width_ != NULL) vehicle_width_->Clear();
  clear_has_vehicle_width();
}
void BasicVehicleContainerHighFrequency::clear_longitudinal_acceleration() {
  if (longitudinal_acceleration_ != NULL) longitudinal_acceleration_->Clear();
  clear_has_longitudinal_acceleration();
}
void BasicVehicleContainerHighFrequency::clear_curvature() {
  if (curvature_ != NULL) curvature_->Clear();
  clear_has_curvature();
}
void BasicVehicleContainerHighFrequency::clear_yaw_rate() {
  if (yaw_rate_ != NULL) yaw_rate_->Clear();
  clear_has_yaw_rate();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicVehicleContainerHighFrequency::kHeadingFieldNumber;
const int BasicVehicleContainerHighFrequency::kSpeedFieldNumber;
const int BasicVehicleContainerHighFrequency::kDriveDirectionFieldNumber;
const int BasicVehicleContainerHighFrequency::kVehicleLengthFieldNumber;
const int BasicVehicleContainerHighFrequency::kVehicleWidthFieldNumber;
const int BasicVehicleContainerHighFrequency::kLongitudinalAccelerationFieldNumber;
const int BasicVehicleContainerHighFrequency::kCurvatureFieldNumber;
const int BasicVehicleContainerHighFrequency::kCurvatureCalculationModeFieldNumber;
const int BasicVehicleContainerHighFrequency::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicVehicleContainerHighFrequency::BasicVehicleContainerHighFrequency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cam_5finterface_2eproto::scc_info_BasicVehicleContainerHighFrequency.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasicVehicleContainerHighFrequency)
}
BasicVehicleContainerHighFrequency::BasicVehicleContainerHighFrequency(const BasicVehicleContainerHighFrequency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_heading()) {
    heading_ = new ::Heading(*from.heading_);
  } else {
    heading_ = NULL;
  }
  if (from.has_speed()) {
    speed_ = new ::Speed(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_vehicle_length()) {
    vehicle_length_ = new ::VehicleLength(*from.vehicle_length_);
  } else {
    vehicle_length_ = NULL;
  }
  if (from.has_vehicle_width()) {
    vehicle_width_ = new ::VehicleWidth(*from.vehicle_width_);
  } else {
    vehicle_width_ = NULL;
  }
  if (from.has_longitudinal_acceleration()) {
    longitudinal_acceleration_ = new ::LongitudinalAcceleration(*from.longitudinal_acceleration_);
  } else {
    longitudinal_acceleration_ = NULL;
  }
  if (from.has_curvature()) {
    curvature_ = new ::Curvature(*from.curvature_);
  } else {
    curvature_ = NULL;
  }
  if (from.has_yaw_rate()) {
    yaw_rate_ = new ::YawRate(*from.yaw_rate_);
  } else {
    yaw_rate_ = NULL;
  }
  ::memcpy(&drive_direction_, &from.drive_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&curvature_calculation_mode_) -
    reinterpret_cast<char*>(&drive_direction_)) + sizeof(curvature_calculation_mode_));
  // @@protoc_insertion_point(copy_constructor:BasicVehicleContainerHighFrequency)
}

void BasicVehicleContainerHighFrequency::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_calculation_mode_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(curvature_calculation_mode_));
}

BasicVehicleContainerHighFrequency::~BasicVehicleContainerHighFrequency() {
  // @@protoc_insertion_point(destructor:BasicVehicleContainerHighFrequency)
  SharedDtor();
}

void BasicVehicleContainerHighFrequency::SharedDtor() {
  if (this != internal_default_instance()) delete heading_;
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete vehicle_length_;
  if (this != internal_default_instance()) delete vehicle_width_;
  if (this != internal_default_instance()) delete longitudinal_acceleration_;
  if (this != internal_default_instance()) delete curvature_;
  if (this != internal_default_instance()) delete yaw_rate_;
}

void BasicVehicleContainerHighFrequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasicVehicleContainerHighFrequency::descriptor() {
  ::protobuf_cam_5finterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cam_5finterface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicVehicleContainerHighFrequency& BasicVehicleContainerHighFrequency::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cam_5finterface_2eproto::scc_info_BasicVehicleContainerHighFrequency.base);
  return *internal_default_instance();
}


void BasicVehicleContainerHighFrequency::Clear() {
// @@protoc_insertion_point(message_clear_start:BasicVehicleContainerHighFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(heading_ != NULL);
      heading_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_ != NULL);
      speed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vehicle_length_ != NULL);
      vehicle_length_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicle_width_ != NULL);
      vehicle_width_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(longitudinal_acceleration_ != NULL);
      longitudinal_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(curvature_ != NULL);
      curvature_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(yaw_rate_ != NULL);
      yaw_rate_->Clear();
    }
  }
  drive_direction_ = 0;
  curvature_calculation_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BasicVehicleContainerHighFrequency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasicVehicleContainerHighFrequency)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Heading heading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Speed speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .DriveDirection drive_direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DriveDirection_IsValid(value)) {
            set_drive_direction(static_cast< ::DriveDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .VehicleLength vehicle_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .VehicleWidth vehicle_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_width()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .LongitudinalAcceleration longitudinal_acceleration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_longitudinal_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Curvature curvature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curvature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .CurvatureCalculationMode curvature_calculation_mode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CurvatureCalculationMode_IsValid(value)) {
            set_curvature_calculation_mode(static_cast< ::CurvatureCalculationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .YawRate yaw_rate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasicVehicleContainerHighFrequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasicVehicleContainerHighFrequency)
  return false;
#undef DO_
}

void BasicVehicleContainerHighFrequency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasicVehicleContainerHighFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Heading heading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_heading(), output);
  }

  // required .Speed speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_speed(), output);
  }

  // required .DriveDirection drive_direction = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->drive_direction(), output);
  }

  // required .VehicleLength vehicle_length = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_vehicle_length(), output);
  }

  // required .VehicleWidth vehicle_width = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_vehicle_width(), output);
  }

  // required .LongitudinalAcceleration longitudinal_acceleration = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_longitudinal_acceleration(), output);
  }

  // required .Curvature curvature = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_curvature(), output);
  }

  // required .CurvatureCalculationMode curvature_calculation_mode = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->curvature_calculation_mode(), output);
  }

  // required .YawRate yaw_rate = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BasicVehicleContainerHighFrequency)
}

::google::protobuf::uint8* BasicVehicleContainerHighFrequency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasicVehicleContainerHighFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Heading heading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_heading(), deterministic, target);
  }

  // required .Speed speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_speed(), deterministic, target);
  }

  // required .DriveDirection drive_direction = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->drive_direction(), target);
  }

  // required .VehicleLength vehicle_length = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_vehicle_length(), deterministic, target);
  }

  // required .VehicleWidth vehicle_width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_vehicle_width(), deterministic, target);
  }

  // required .LongitudinalAcceleration longitudinal_acceleration = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_longitudinal_acceleration(), deterministic, target);
  }

  // required .Curvature curvature = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_curvature(), deterministic, target);
  }

  // required .CurvatureCalculationMode curvature_calculation_mode = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->curvature_calculation_mode(), target);
  }

  // required .YawRate yaw_rate = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_yaw_rate(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasicVehicleContainerHighFrequency)
  return target;
}

size_t BasicVehicleContainerHighFrequency::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BasicVehicleContainerHighFrequency)
  size_t total_size = 0;

  if (has_heading()) {
    // required .Heading heading = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heading_);
  }

  if (has_speed()) {
    // required .Speed speed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_);
  }

  if (has_vehicle_length()) {
    // required .VehicleLength vehicle_length = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_length_);
  }

  if (has_vehicle_width()) {
    // required .VehicleWidth vehicle_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_width_);
  }

  if (has_longitudinal_acceleration()) {
    // required .LongitudinalAcceleration longitudinal_acceleration = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *longitudinal_acceleration_);
  }

  if (has_curvature()) {
    // required .Curvature curvature = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *curvature_);
  }

  if (has_yaw_rate()) {
    // required .YawRate yaw_rate = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_rate_);
  }

  if (has_drive_direction()) {
    // required .DriveDirection drive_direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drive_direction());
  }

  if (has_curvature_calculation_mode()) {
    // required .CurvatureCalculationMode curvature_calculation_mode = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvature_calculation_mode());
  }

  return total_size;
}
size_t BasicVehicleContainerHighFrequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasicVehicleContainerHighFrequency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .Heading heading = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heading_);

    // required .Speed speed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_);

    // required .VehicleLength vehicle_length = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_length_);

    // required .VehicleWidth vehicle_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_width_);

    // required .LongitudinalAcceleration longitudinal_acceleration = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *longitudinal_acceleration_);

    // required .Curvature curvature = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *curvature_);

    // required .YawRate yaw_rate = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_rate_);

    // required .DriveDirection drive_direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drive_direction());

    // required .CurvatureCalculationMode curvature_calculation_mode = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvature_calculation_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicVehicleContainerHighFrequency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasicVehicleContainerHighFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicVehicleContainerHighFrequency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicVehicleContainerHighFrequency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasicVehicleContainerHighFrequency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasicVehicleContainerHighFrequency)
    MergeFrom(*source);
  }
}

void BasicVehicleContainerHighFrequency::MergeFrom(const BasicVehicleContainerHighFrequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasicVehicleContainerHighFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_heading()->::Heading::MergeFrom(from.heading());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed()->::Speed::MergeFrom(from.speed());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vehicle_length()->::VehicleLength::MergeFrom(from.vehicle_length());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_vehicle_width()->::VehicleWidth::MergeFrom(from.vehicle_width());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_longitudinal_acceleration()->::LongitudinalAcceleration::MergeFrom(from.longitudinal_acceleration());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_curvature()->::Curvature::MergeFrom(from.curvature());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_yaw_rate()->::YawRate::MergeFrom(from.yaw_rate());
    }
    if (cached_has_bits & 0x00000080u) {
      drive_direction_ = from.drive_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_curvature_calculation_mode(from.curvature_calculation_mode());
  }
}

void BasicVehicleContainerHighFrequency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasicVehicleContainerHighFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicVehicleContainerHighFrequency::CopyFrom(const BasicVehicleContainerHighFrequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasicVehicleContainerHighFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicVehicleContainerHighFrequency::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  if (has_heading()) {
    if (!this->heading_->IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed_->IsInitialized()) return false;
  }
  if (has_vehicle_length()) {
    if (!this->vehicle_length_->IsInitialized()) return false;
  }
  if (has_vehicle_width()) {
    if (!this->vehicle_width_->IsInitialized()) return false;
  }
  if (has_longitudinal_acceleration()) {
    if (!this->longitudinal_acceleration_->IsInitialized()) return false;
  }
  if (has_curvature()) {
    if (!this->curvature_->IsInitialized()) return false;
  }
  if (has_yaw_rate()) {
    if (!this->yaw_rate_->IsInitialized()) return false;
  }
  return true;
}

void BasicVehicleContainerHighFrequency::Swap(BasicVehicleContainerHighFrequency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicVehicleContainerHighFrequency::InternalSwap(BasicVehicleContainerHighFrequency* other) {
  using std::swap;
  swap(heading_, other->heading_);
  swap(speed_, other->speed_);
  swap(vehicle_length_, other->vehicle_length_);
  swap(vehicle_width_, other->vehicle_width_);
  swap(longitudinal_acceleration_, other->longitudinal_acceleration_);
  swap(curvature_, other->curvature_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(drive_direction_, other->drive_direction_);
  swap(curvature_calculation_mode_, other->curvature_calculation_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasicVehicleContainerHighFrequency::GetMetadata() const {
  protobuf_cam_5finterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cam_5finterface_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasicVehicleContainerLowFrequency::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicVehicleContainerLowFrequency::kTemp2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cam_5finterface_2eproto::scc_info_BasicVehicleContainerLowFrequency.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasicVehicleContainerLowFrequency)
}
BasicVehicleContainerLowFrequency::BasicVehicleContainerLowFrequency(const BasicVehicleContainerLowFrequency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temp2_ = from.temp2_;
  // @@protoc_insertion_point(copy_constructor:BasicVehicleContainerLowFrequency)
}

void BasicVehicleContainerLowFrequency::SharedCtor() {
  temp2_ = 0u;
}

BasicVehicleContainerLowFrequency::~BasicVehicleContainerLowFrequency() {
  // @@protoc_insertion_point(destructor:BasicVehicleContainerLowFrequency)
  SharedDtor();
}

void BasicVehicleContainerLowFrequency::SharedDtor() {
}

void BasicVehicleContainerLowFrequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasicVehicleContainerLowFrequency::descriptor() {
  ::protobuf_cam_5finterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cam_5finterface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicVehicleContainerLowFrequency& BasicVehicleContainerLowFrequency::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cam_5finterface_2eproto::scc_info_BasicVehicleContainerLowFrequency.base);
  return *internal_default_instance();
}


void BasicVehicleContainerLowFrequency::Clear() {
// @@protoc_insertion_point(message_clear_start:BasicVehicleContainerLowFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temp2_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BasicVehicleContainerLowFrequency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasicVehicleContainerLowFrequency)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 temp2 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_temp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasicVehicleContainerLowFrequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasicVehicleContainerLowFrequency)
  return false;
#undef DO_
}

void BasicVehicleContainerLowFrequency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasicVehicleContainerLowFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 temp2 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->temp2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BasicVehicleContainerLowFrequency)
}

::google::protobuf::uint8* BasicVehicleContainerLowFrequency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasicVehicleContainerLowFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 temp2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->temp2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasicVehicleContainerLowFrequency)
  return target;
}

size_t BasicVehicleContainerLowFrequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasicVehicleContainerLowFrequency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 temp2 = 1;
  if (has_temp2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temp2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicVehicleContainerLowFrequency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasicVehicleContainerLowFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicVehicleContainerLowFrequency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicVehicleContainerLowFrequency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasicVehicleContainerLowFrequency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasicVehicleContainerLowFrequency)
    MergeFrom(*source);
  }
}

void BasicVehicleContainerLowFrequency::MergeFrom(const BasicVehicleContainerLowFrequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasicVehicleContainerLowFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_temp2()) {
    set_temp2(from.temp2());
  }
}

void BasicVehicleContainerLowFrequency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasicVehicleContainerLowFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicVehicleContainerLowFrequency::CopyFrom(const BasicVehicleContainerLowFrequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasicVehicleContainerLowFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicVehicleContainerLowFrequency::IsInitialized() const {
  return true;
}

void BasicVehicleContainerLowFrequency::Swap(BasicVehicleContainerLowFrequency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicVehicleContainerLowFrequency::InternalSwap(BasicVehicleContainerLowFrequency* other) {
  using std::swap;
  swap(temp2_, other->temp2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasicVehicleContainerLowFrequency::GetMetadata() const {
  protobuf_cam_5finterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cam_5finterface_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CAMessage* Arena::CreateMaybeMessage< ::CAMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CAMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BasicVehicleContainerHighFrequency* Arena::CreateMaybeMessage< ::BasicVehicleContainerHighFrequency >(Arena* arena) {
  return Arena::CreateInternal< ::BasicVehicleContainerHighFrequency >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BasicVehicleContainerLowFrequency* Arena::CreateMaybeMessage< ::BasicVehicleContainerLowFrequency >(Arena* arena) {
  return Arena::CreateInternal< ::BasicVehicleContainerLowFrequency >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
