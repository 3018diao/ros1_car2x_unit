// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITSPDUHEADERINTERFACE_H_
#define FLATBUFFERS_GENERATED_ITSPDUHEADERINTERFACE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

struct ItsPduHeader;
struct ItsPduHeaderBuilder;

struct ItsPduHeader FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItsPduHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROTOCOL_VERSION = 4,
    VT_MESSAGE_ID = 6,
    VT_STATION_ID = 8
  };
  uint32_t protocol_version() const {
    return GetField<uint32_t>(VT_PROTOCOL_VERSION, 0);
  }
  uint32_t message_id() const {
    return GetField<uint32_t>(VT_MESSAGE_ID, 0);
  }
  uint32_t station_id() const {
    return GetField<uint32_t>(VT_STATION_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PROTOCOL_VERSION, 4) &&
           VerifyField<uint32_t>(verifier, VT_MESSAGE_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_STATION_ID, 4) &&
           verifier.EndTable();
  }
};

struct ItsPduHeaderBuilder {
  typedef ItsPduHeader Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_protocol_version(uint32_t protocol_version) {
    fbb_.AddElement<uint32_t>(ItsPduHeader::VT_PROTOCOL_VERSION, protocol_version, 0);
  }
  void add_message_id(uint32_t message_id) {
    fbb_.AddElement<uint32_t>(ItsPduHeader::VT_MESSAGE_ID, message_id, 0);
  }
  void add_station_id(uint32_t station_id) {
    fbb_.AddElement<uint32_t>(ItsPduHeader::VT_STATION_ID, station_id, 0);
  }
  explicit ItsPduHeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItsPduHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItsPduHeader>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItsPduHeader> CreateItsPduHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t protocol_version = 0,
    uint32_t message_id = 0,
    uint32_t station_id = 0) {
  ItsPduHeaderBuilder builder_(_fbb);
  builder_.add_station_id(station_id);
  builder_.add_message_id(message_id);
  builder_.add_protocol_version(protocol_version);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_ITSPDUHEADERINTERFACE_H_
