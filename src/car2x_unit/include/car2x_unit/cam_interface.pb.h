// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cam_interface.proto

#ifndef PROTOBUF_INCLUDED_cam_5finterface_2eproto
#define PROTOBUF_INCLUDED_cam_5finterface_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "itspduheader_interface.pb.h"  // IWYU pragma: export
#include "etsi_its_cdd.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cam_5finterface_2eproto 

namespace protobuf_cam_5finterface_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cam_5finterface_2eproto
class BasicVehicleContainerHighFrequency;
class BasicVehicleContainerHighFrequencyDefaultTypeInternal;
extern BasicVehicleContainerHighFrequencyDefaultTypeInternal _BasicVehicleContainerHighFrequency_default_instance_;
class BasicVehicleContainerLowFrequency;
class BasicVehicleContainerLowFrequencyDefaultTypeInternal;
extern BasicVehicleContainerLowFrequencyDefaultTypeInternal _BasicVehicleContainerLowFrequency_default_instance_;
class CAMessage;
class CAMessageDefaultTypeInternal;
extern CAMessageDefaultTypeInternal _CAMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::BasicVehicleContainerHighFrequency* Arena::CreateMaybeMessage<::BasicVehicleContainerHighFrequency>(Arena*);
template<> ::BasicVehicleContainerLowFrequency* Arena::CreateMaybeMessage<::BasicVehicleContainerLowFrequency>(Arena*);
template<> ::CAMessage* Arena::CreateMaybeMessage<::CAMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CAMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CAMessage) */ {
 public:
  CAMessage();
  virtual ~CAMessage();

  CAMessage(const CAMessage& from);

  inline CAMessage& operator=(const CAMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CAMessage(CAMessage&& from) noexcept
    : CAMessage() {
    *this = ::std::move(from);
  }

  inline CAMessage& operator=(CAMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAMessage* internal_default_instance() {
    return reinterpret_cast<const CAMessage*>(
               &_CAMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CAMessage* other);
  friend void swap(CAMessage& a, CAMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CAMessage* New() const final {
    return CreateMaybeMessage<CAMessage>(NULL);
  }

  CAMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CAMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CAMessage& from);
  void MergeFrom(const CAMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ItsPduHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ItsPduHeader& _internal_header() const;
  public:
  const ::ItsPduHeader& header() const;
  ::ItsPduHeader* release_header();
  ::ItsPduHeader* mutable_header();
  void set_allocated_header(::ItsPduHeader* header);

  // required .ReferencePosition reference_position = 4;
  bool has_reference_position() const;
  void clear_reference_position();
  static const int kReferencePositionFieldNumber = 4;
  private:
  const ::ReferencePosition& _internal_reference_position() const;
  public:
  const ::ReferencePosition& reference_position() const;
  ::ReferencePosition* release_reference_position();
  ::ReferencePosition* mutable_reference_position();
  void set_allocated_reference_position(::ReferencePosition* reference_position);

  // required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
  bool has_high_frequency_container() const;
  void clear_high_frequency_container();
  static const int kHighFrequencyContainerFieldNumber = 5;
  private:
  const ::BasicVehicleContainerHighFrequency& _internal_high_frequency_container() const;
  public:
  const ::BasicVehicleContainerHighFrequency& high_frequency_container() const;
  ::BasicVehicleContainerHighFrequency* release_high_frequency_container();
  ::BasicVehicleContainerHighFrequency* mutable_high_frequency_container();
  void set_allocated_high_frequency_container(::BasicVehicleContainerHighFrequency* high_frequency_container);

  // optional .BasicVehicleContainerLowFrequency low_frequency_container = 6;
  bool has_low_frequency_container() const;
  void clear_low_frequency_container();
  static const int kLowFrequencyContainerFieldNumber = 6;
  private:
  const ::BasicVehicleContainerLowFrequency& _internal_low_frequency_container() const;
  public:
  const ::BasicVehicleContainerLowFrequency& low_frequency_container() const;
  ::BasicVehicleContainerLowFrequency* release_low_frequency_container();
  ::BasicVehicleContainerLowFrequency* mutable_low_frequency_container();
  void set_allocated_low_frequency_container(::BasicVehicleContainerLowFrequency* low_frequency_container);

  // required uint64 generation_delta_time = 2;
  bool has_generation_delta_time() const;
  void clear_generation_delta_time();
  static const int kGenerationDeltaTimeFieldNumber = 2;
  ::google::protobuf::uint64 generation_delta_time() const;
  void set_generation_delta_time(::google::protobuf::uint64 value);

  // required .StationType station_type = 3;
  bool has_station_type() const;
  void clear_station_type();
  static const int kStationTypeFieldNumber = 3;
  ::StationType station_type() const;
  void set_station_type(::StationType value);

  // @@protoc_insertion_point(class_scope:CAMessage)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_generation_delta_time();
  void clear_has_generation_delta_time();
  void set_has_station_type();
  void clear_has_station_type();
  void set_has_reference_position();
  void clear_has_reference_position();
  void set_has_high_frequency_container();
  void clear_has_high_frequency_container();
  void set_has_low_frequency_container();
  void clear_has_low_frequency_container();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ItsPduHeader* header_;
  ::ReferencePosition* reference_position_;
  ::BasicVehicleContainerHighFrequency* high_frequency_container_;
  ::BasicVehicleContainerLowFrequency* low_frequency_container_;
  ::google::protobuf::uint64 generation_delta_time_;
  int station_type_;
  friend struct ::protobuf_cam_5finterface_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicVehicleContainerHighFrequency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasicVehicleContainerHighFrequency) */ {
 public:
  BasicVehicleContainerHighFrequency();
  virtual ~BasicVehicleContainerHighFrequency();

  BasicVehicleContainerHighFrequency(const BasicVehicleContainerHighFrequency& from);

  inline BasicVehicleContainerHighFrequency& operator=(const BasicVehicleContainerHighFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicVehicleContainerHighFrequency(BasicVehicleContainerHighFrequency&& from) noexcept
    : BasicVehicleContainerHighFrequency() {
    *this = ::std::move(from);
  }

  inline BasicVehicleContainerHighFrequency& operator=(BasicVehicleContainerHighFrequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicVehicleContainerHighFrequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicVehicleContainerHighFrequency* internal_default_instance() {
    return reinterpret_cast<const BasicVehicleContainerHighFrequency*>(
               &_BasicVehicleContainerHighFrequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BasicVehicleContainerHighFrequency* other);
  friend void swap(BasicVehicleContainerHighFrequency& a, BasicVehicleContainerHighFrequency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicVehicleContainerHighFrequency* New() const final {
    return CreateMaybeMessage<BasicVehicleContainerHighFrequency>(NULL);
  }

  BasicVehicleContainerHighFrequency* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicVehicleContainerHighFrequency>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicVehicleContainerHighFrequency& from);
  void MergeFrom(const BasicVehicleContainerHighFrequency& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicVehicleContainerHighFrequency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Heading heading = 1;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 1;
  private:
  const ::Heading& _internal_heading() const;
  public:
  const ::Heading& heading() const;
  ::Heading* release_heading();
  ::Heading* mutable_heading();
  void set_allocated_heading(::Heading* heading);

  // required .Speed speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  private:
  const ::Speed& _internal_speed() const;
  public:
  const ::Speed& speed() const;
  ::Speed* release_speed();
  ::Speed* mutable_speed();
  void set_allocated_speed(::Speed* speed);

  // required .VehicleLength vehicle_length = 4;
  bool has_vehicle_length() const;
  void clear_vehicle_length();
  static const int kVehicleLengthFieldNumber = 4;
  private:
  const ::VehicleLength& _internal_vehicle_length() const;
  public:
  const ::VehicleLength& vehicle_length() const;
  ::VehicleLength* release_vehicle_length();
  ::VehicleLength* mutable_vehicle_length();
  void set_allocated_vehicle_length(::VehicleLength* vehicle_length);

  // required .VehicleWidth vehicle_width = 5;
  bool has_vehicle_width() const;
  void clear_vehicle_width();
  static const int kVehicleWidthFieldNumber = 5;
  private:
  const ::VehicleWidth& _internal_vehicle_width() const;
  public:
  const ::VehicleWidth& vehicle_width() const;
  ::VehicleWidth* release_vehicle_width();
  ::VehicleWidth* mutable_vehicle_width();
  void set_allocated_vehicle_width(::VehicleWidth* vehicle_width);

  // required .LongitudinalAcceleration longitudinal_acceleration = 6;
  bool has_longitudinal_acceleration() const;
  void clear_longitudinal_acceleration();
  static const int kLongitudinalAccelerationFieldNumber = 6;
  private:
  const ::LongitudinalAcceleration& _internal_longitudinal_acceleration() const;
  public:
  const ::LongitudinalAcceleration& longitudinal_acceleration() const;
  ::LongitudinalAcceleration* release_longitudinal_acceleration();
  ::LongitudinalAcceleration* mutable_longitudinal_acceleration();
  void set_allocated_longitudinal_acceleration(::LongitudinalAcceleration* longitudinal_acceleration);

  // required .Curvature curvature = 7;
  bool has_curvature() const;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 7;
  private:
  const ::Curvature& _internal_curvature() const;
  public:
  const ::Curvature& curvature() const;
  ::Curvature* release_curvature();
  ::Curvature* mutable_curvature();
  void set_allocated_curvature(::Curvature* curvature);

  // required .YawRate yaw_rate = 9;
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  static const int kYawRateFieldNumber = 9;
  private:
  const ::YawRate& _internal_yaw_rate() const;
  public:
  const ::YawRate& yaw_rate() const;
  ::YawRate* release_yaw_rate();
  ::YawRate* mutable_yaw_rate();
  void set_allocated_yaw_rate(::YawRate* yaw_rate);

  // required .DriveDirection drive_direction = 3;
  bool has_drive_direction() const;
  void clear_drive_direction();
  static const int kDriveDirectionFieldNumber = 3;
  ::DriveDirection drive_direction() const;
  void set_drive_direction(::DriveDirection value);

  // required .CurvatureCalculationMode curvature_calculation_mode = 8;
  bool has_curvature_calculation_mode() const;
  void clear_curvature_calculation_mode();
  static const int kCurvatureCalculationModeFieldNumber = 8;
  ::CurvatureCalculationMode curvature_calculation_mode() const;
  void set_curvature_calculation_mode(::CurvatureCalculationMode value);

  // @@protoc_insertion_point(class_scope:BasicVehicleContainerHighFrequency)
 private:
  void set_has_heading();
  void clear_has_heading();
  void set_has_speed();
  void clear_has_speed();
  void set_has_drive_direction();
  void clear_has_drive_direction();
  void set_has_vehicle_length();
  void clear_has_vehicle_length();
  void set_has_vehicle_width();
  void clear_has_vehicle_width();
  void set_has_longitudinal_acceleration();
  void clear_has_longitudinal_acceleration();
  void set_has_curvature();
  void clear_has_curvature();
  void set_has_curvature_calculation_mode();
  void clear_has_curvature_calculation_mode();
  void set_has_yaw_rate();
  void clear_has_yaw_rate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Heading* heading_;
  ::Speed* speed_;
  ::VehicleLength* vehicle_length_;
  ::VehicleWidth* vehicle_width_;
  ::LongitudinalAcceleration* longitudinal_acceleration_;
  ::Curvature* curvature_;
  ::YawRate* yaw_rate_;
  int drive_direction_;
  int curvature_calculation_mode_;
  friend struct ::protobuf_cam_5finterface_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicVehicleContainerLowFrequency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasicVehicleContainerLowFrequency) */ {
 public:
  BasicVehicleContainerLowFrequency();
  virtual ~BasicVehicleContainerLowFrequency();

  BasicVehicleContainerLowFrequency(const BasicVehicleContainerLowFrequency& from);

  inline BasicVehicleContainerLowFrequency& operator=(const BasicVehicleContainerLowFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicVehicleContainerLowFrequency(BasicVehicleContainerLowFrequency&& from) noexcept
    : BasicVehicleContainerLowFrequency() {
    *this = ::std::move(from);
  }

  inline BasicVehicleContainerLowFrequency& operator=(BasicVehicleContainerLowFrequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicVehicleContainerLowFrequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicVehicleContainerLowFrequency* internal_default_instance() {
    return reinterpret_cast<const BasicVehicleContainerLowFrequency*>(
               &_BasicVehicleContainerLowFrequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BasicVehicleContainerLowFrequency* other);
  friend void swap(BasicVehicleContainerLowFrequency& a, BasicVehicleContainerLowFrequency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicVehicleContainerLowFrequency* New() const final {
    return CreateMaybeMessage<BasicVehicleContainerLowFrequency>(NULL);
  }

  BasicVehicleContainerLowFrequency* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicVehicleContainerLowFrequency>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicVehicleContainerLowFrequency& from);
  void MergeFrom(const BasicVehicleContainerLowFrequency& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicVehicleContainerLowFrequency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 temp2 = 1;
  bool has_temp2() const;
  void clear_temp2();
  static const int kTemp2FieldNumber = 1;
  ::google::protobuf::uint32 temp2() const;
  void set_temp2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BasicVehicleContainerLowFrequency)
 private:
  void set_has_temp2();
  void clear_has_temp2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 temp2_;
  friend struct ::protobuf_cam_5finterface_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CAMessage

// required .ItsPduHeader header = 1;
inline bool CAMessage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAMessage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ItsPduHeader& CAMessage::_internal_header() const {
  return *header_;
}
inline const ::ItsPduHeader& CAMessage::header() const {
  const ::ItsPduHeader* p = header_;
  // @@protoc_insertion_point(field_get:CAMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ItsPduHeader*>(
      &::_ItsPduHeader_default_instance_);
}
inline ::ItsPduHeader* CAMessage::release_header() {
  // @@protoc_insertion_point(field_release:CAMessage.header)
  clear_has_header();
  ::ItsPduHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ItsPduHeader* CAMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ItsPduHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CAMessage.header)
  return header_;
}
inline void CAMessage::set_allocated_header(::ItsPduHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:CAMessage.header)
}

// required uint64 generation_delta_time = 2;
inline bool CAMessage::has_generation_delta_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAMessage::set_has_generation_delta_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAMessage::clear_has_generation_delta_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAMessage::clear_generation_delta_time() {
  generation_delta_time_ = GOOGLE_ULONGLONG(0);
  clear_has_generation_delta_time();
}
inline ::google::protobuf::uint64 CAMessage::generation_delta_time() const {
  // @@protoc_insertion_point(field_get:CAMessage.generation_delta_time)
  return generation_delta_time_;
}
inline void CAMessage::set_generation_delta_time(::google::protobuf::uint64 value) {
  set_has_generation_delta_time();
  generation_delta_time_ = value;
  // @@protoc_insertion_point(field_set:CAMessage.generation_delta_time)
}

// required .StationType station_type = 3;
inline bool CAMessage::has_station_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAMessage::set_has_station_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CAMessage::clear_has_station_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CAMessage::clear_station_type() {
  station_type_ = 0;
  clear_has_station_type();
}
inline ::StationType CAMessage::station_type() const {
  // @@protoc_insertion_point(field_get:CAMessage.station_type)
  return static_cast< ::StationType >(station_type_);
}
inline void CAMessage::set_station_type(::StationType value) {
  assert(::StationType_IsValid(value));
  set_has_station_type();
  station_type_ = value;
  // @@protoc_insertion_point(field_set:CAMessage.station_type)
}

// required .ReferencePosition reference_position = 4;
inline bool CAMessage::has_reference_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAMessage::set_has_reference_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAMessage::clear_has_reference_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ReferencePosition& CAMessage::_internal_reference_position() const {
  return *reference_position_;
}
inline const ::ReferencePosition& CAMessage::reference_position() const {
  const ::ReferencePosition* p = reference_position_;
  // @@protoc_insertion_point(field_get:CAMessage.reference_position)
  return p != NULL ? *p : *reinterpret_cast<const ::ReferencePosition*>(
      &::_ReferencePosition_default_instance_);
}
inline ::ReferencePosition* CAMessage::release_reference_position() {
  // @@protoc_insertion_point(field_release:CAMessage.reference_position)
  clear_has_reference_position();
  ::ReferencePosition* temp = reference_position_;
  reference_position_ = NULL;
  return temp;
}
inline ::ReferencePosition* CAMessage::mutable_reference_position() {
  set_has_reference_position();
  if (reference_position_ == NULL) {
    auto* p = CreateMaybeMessage<::ReferencePosition>(GetArenaNoVirtual());
    reference_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CAMessage.reference_position)
  return reference_position_;
}
inline void CAMessage::set_allocated_reference_position(::ReferencePosition* reference_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_position_);
  }
  if (reference_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_position, submessage_arena);
    }
    set_has_reference_position();
  } else {
    clear_has_reference_position();
  }
  reference_position_ = reference_position;
  // @@protoc_insertion_point(field_set_allocated:CAMessage.reference_position)
}

// required .BasicVehicleContainerHighFrequency high_frequency_container = 5;
inline bool CAMessage::has_high_frequency_container() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAMessage::set_has_high_frequency_container() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAMessage::clear_has_high_frequency_container() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAMessage::clear_high_frequency_container() {
  if (high_frequency_container_ != NULL) high_frequency_container_->Clear();
  clear_has_high_frequency_container();
}
inline const ::BasicVehicleContainerHighFrequency& CAMessage::_internal_high_frequency_container() const {
  return *high_frequency_container_;
}
inline const ::BasicVehicleContainerHighFrequency& CAMessage::high_frequency_container() const {
  const ::BasicVehicleContainerHighFrequency* p = high_frequency_container_;
  // @@protoc_insertion_point(field_get:CAMessage.high_frequency_container)
  return p != NULL ? *p : *reinterpret_cast<const ::BasicVehicleContainerHighFrequency*>(
      &::_BasicVehicleContainerHighFrequency_default_instance_);
}
inline ::BasicVehicleContainerHighFrequency* CAMessage::release_high_frequency_container() {
  // @@protoc_insertion_point(field_release:CAMessage.high_frequency_container)
  clear_has_high_frequency_container();
  ::BasicVehicleContainerHighFrequency* temp = high_frequency_container_;
  high_frequency_container_ = NULL;
  return temp;
}
inline ::BasicVehicleContainerHighFrequency* CAMessage::mutable_high_frequency_container() {
  set_has_high_frequency_container();
  if (high_frequency_container_ == NULL) {
    auto* p = CreateMaybeMessage<::BasicVehicleContainerHighFrequency>(GetArenaNoVirtual());
    high_frequency_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CAMessage.high_frequency_container)
  return high_frequency_container_;
}
inline void CAMessage::set_allocated_high_frequency_container(::BasicVehicleContainerHighFrequency* high_frequency_container) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete high_frequency_container_;
  }
  if (high_frequency_container) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      high_frequency_container = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, high_frequency_container, submessage_arena);
    }
    set_has_high_frequency_container();
  } else {
    clear_has_high_frequency_container();
  }
  high_frequency_container_ = high_frequency_container;
  // @@protoc_insertion_point(field_set_allocated:CAMessage.high_frequency_container)
}

// optional .BasicVehicleContainerLowFrequency low_frequency_container = 6;
inline bool CAMessage::has_low_frequency_container() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAMessage::set_has_low_frequency_container() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAMessage::clear_has_low_frequency_container() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAMessage::clear_low_frequency_container() {
  if (low_frequency_container_ != NULL) low_frequency_container_->Clear();
  clear_has_low_frequency_container();
}
inline const ::BasicVehicleContainerLowFrequency& CAMessage::_internal_low_frequency_container() const {
  return *low_frequency_container_;
}
inline const ::BasicVehicleContainerLowFrequency& CAMessage::low_frequency_container() const {
  const ::BasicVehicleContainerLowFrequency* p = low_frequency_container_;
  // @@protoc_insertion_point(field_get:CAMessage.low_frequency_container)
  return p != NULL ? *p : *reinterpret_cast<const ::BasicVehicleContainerLowFrequency*>(
      &::_BasicVehicleContainerLowFrequency_default_instance_);
}
inline ::BasicVehicleContainerLowFrequency* CAMessage::release_low_frequency_container() {
  // @@protoc_insertion_point(field_release:CAMessage.low_frequency_container)
  clear_has_low_frequency_container();
  ::BasicVehicleContainerLowFrequency* temp = low_frequency_container_;
  low_frequency_container_ = NULL;
  return temp;
}
inline ::BasicVehicleContainerLowFrequency* CAMessage::mutable_low_frequency_container() {
  set_has_low_frequency_container();
  if (low_frequency_container_ == NULL) {
    auto* p = CreateMaybeMessage<::BasicVehicleContainerLowFrequency>(GetArenaNoVirtual());
    low_frequency_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CAMessage.low_frequency_container)
  return low_frequency_container_;
}
inline void CAMessage::set_allocated_low_frequency_container(::BasicVehicleContainerLowFrequency* low_frequency_container) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete low_frequency_container_;
  }
  if (low_frequency_container) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      low_frequency_container = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, low_frequency_container, submessage_arena);
    }
    set_has_low_frequency_container();
  } else {
    clear_has_low_frequency_container();
  }
  low_frequency_container_ = low_frequency_container;
  // @@protoc_insertion_point(field_set_allocated:CAMessage.low_frequency_container)
}

// -------------------------------------------------------------------

// BasicVehicleContainerHighFrequency

// required .Heading heading = 1;
inline bool BasicVehicleContainerHighFrequency::has_heading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_heading() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_heading() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Heading& BasicVehicleContainerHighFrequency::_internal_heading() const {
  return *heading_;
}
inline const ::Heading& BasicVehicleContainerHighFrequency::heading() const {
  const ::Heading* p = heading_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.heading)
  return p != NULL ? *p : *reinterpret_cast<const ::Heading*>(
      &::_Heading_default_instance_);
}
inline ::Heading* BasicVehicleContainerHighFrequency::release_heading() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.heading)
  clear_has_heading();
  ::Heading* temp = heading_;
  heading_ = NULL;
  return temp;
}
inline ::Heading* BasicVehicleContainerHighFrequency::mutable_heading() {
  set_has_heading();
  if (heading_ == NULL) {
    auto* p = CreateMaybeMessage<::Heading>(GetArenaNoVirtual());
    heading_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.heading)
  return heading_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_heading(::Heading* heading) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heading_);
  }
  if (heading) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heading = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heading, submessage_arena);
    }
    set_has_heading();
  } else {
    clear_has_heading();
  }
  heading_ = heading;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.heading)
}

// required .Speed speed = 2;
inline bool BasicVehicleContainerHighFrequency::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Speed& BasicVehicleContainerHighFrequency::_internal_speed() const {
  return *speed_;
}
inline const ::Speed& BasicVehicleContainerHighFrequency::speed() const {
  const ::Speed* p = speed_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.speed)
  return p != NULL ? *p : *reinterpret_cast<const ::Speed*>(
      &::_Speed_default_instance_);
}
inline ::Speed* BasicVehicleContainerHighFrequency::release_speed() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.speed)
  clear_has_speed();
  ::Speed* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline ::Speed* BasicVehicleContainerHighFrequency::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) {
    auto* p = CreateMaybeMessage<::Speed>(GetArenaNoVirtual());
    speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.speed)
  return speed_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_speed(::Speed* speed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(speed_);
  }
  if (speed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    set_has_speed();
  } else {
    clear_has_speed();
  }
  speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.speed)
}

// required .DriveDirection drive_direction = 3;
inline bool BasicVehicleContainerHighFrequency::has_drive_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_drive_direction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_drive_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BasicVehicleContainerHighFrequency::clear_drive_direction() {
  drive_direction_ = 0;
  clear_has_drive_direction();
}
inline ::DriveDirection BasicVehicleContainerHighFrequency::drive_direction() const {
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.drive_direction)
  return static_cast< ::DriveDirection >(drive_direction_);
}
inline void BasicVehicleContainerHighFrequency::set_drive_direction(::DriveDirection value) {
  assert(::DriveDirection_IsValid(value));
  set_has_drive_direction();
  drive_direction_ = value;
  // @@protoc_insertion_point(field_set:BasicVehicleContainerHighFrequency.drive_direction)
}

// required .VehicleLength vehicle_length = 4;
inline bool BasicVehicleContainerHighFrequency::has_vehicle_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_vehicle_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_vehicle_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::VehicleLength& BasicVehicleContainerHighFrequency::_internal_vehicle_length() const {
  return *vehicle_length_;
}
inline const ::VehicleLength& BasicVehicleContainerHighFrequency::vehicle_length() const {
  const ::VehicleLength* p = vehicle_length_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.vehicle_length)
  return p != NULL ? *p : *reinterpret_cast<const ::VehicleLength*>(
      &::_VehicleLength_default_instance_);
}
inline ::VehicleLength* BasicVehicleContainerHighFrequency::release_vehicle_length() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.vehicle_length)
  clear_has_vehicle_length();
  ::VehicleLength* temp = vehicle_length_;
  vehicle_length_ = NULL;
  return temp;
}
inline ::VehicleLength* BasicVehicleContainerHighFrequency::mutable_vehicle_length() {
  set_has_vehicle_length();
  if (vehicle_length_ == NULL) {
    auto* p = CreateMaybeMessage<::VehicleLength>(GetArenaNoVirtual());
    vehicle_length_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.vehicle_length)
  return vehicle_length_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_vehicle_length(::VehicleLength* vehicle_length) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vehicle_length_);
  }
  if (vehicle_length) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_length = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_length, submessage_arena);
    }
    set_has_vehicle_length();
  } else {
    clear_has_vehicle_length();
  }
  vehicle_length_ = vehicle_length;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.vehicle_length)
}

// required .VehicleWidth vehicle_width = 5;
inline bool BasicVehicleContainerHighFrequency::has_vehicle_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_vehicle_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_vehicle_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::VehicleWidth& BasicVehicleContainerHighFrequency::_internal_vehicle_width() const {
  return *vehicle_width_;
}
inline const ::VehicleWidth& BasicVehicleContainerHighFrequency::vehicle_width() const {
  const ::VehicleWidth* p = vehicle_width_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.vehicle_width)
  return p != NULL ? *p : *reinterpret_cast<const ::VehicleWidth*>(
      &::_VehicleWidth_default_instance_);
}
inline ::VehicleWidth* BasicVehicleContainerHighFrequency::release_vehicle_width() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.vehicle_width)
  clear_has_vehicle_width();
  ::VehicleWidth* temp = vehicle_width_;
  vehicle_width_ = NULL;
  return temp;
}
inline ::VehicleWidth* BasicVehicleContainerHighFrequency::mutable_vehicle_width() {
  set_has_vehicle_width();
  if (vehicle_width_ == NULL) {
    auto* p = CreateMaybeMessage<::VehicleWidth>(GetArenaNoVirtual());
    vehicle_width_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.vehicle_width)
  return vehicle_width_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_vehicle_width(::VehicleWidth* vehicle_width) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vehicle_width_);
  }
  if (vehicle_width) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_width = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_width, submessage_arena);
    }
    set_has_vehicle_width();
  } else {
    clear_has_vehicle_width();
  }
  vehicle_width_ = vehicle_width;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.vehicle_width)
}

// required .LongitudinalAcceleration longitudinal_acceleration = 6;
inline bool BasicVehicleContainerHighFrequency::has_longitudinal_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_longitudinal_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_longitudinal_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::LongitudinalAcceleration& BasicVehicleContainerHighFrequency::_internal_longitudinal_acceleration() const {
  return *longitudinal_acceleration_;
}
inline const ::LongitudinalAcceleration& BasicVehicleContainerHighFrequency::longitudinal_acceleration() const {
  const ::LongitudinalAcceleration* p = longitudinal_acceleration_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.longitudinal_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::LongitudinalAcceleration*>(
      &::_LongitudinalAcceleration_default_instance_);
}
inline ::LongitudinalAcceleration* BasicVehicleContainerHighFrequency::release_longitudinal_acceleration() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.longitudinal_acceleration)
  clear_has_longitudinal_acceleration();
  ::LongitudinalAcceleration* temp = longitudinal_acceleration_;
  longitudinal_acceleration_ = NULL;
  return temp;
}
inline ::LongitudinalAcceleration* BasicVehicleContainerHighFrequency::mutable_longitudinal_acceleration() {
  set_has_longitudinal_acceleration();
  if (longitudinal_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::LongitudinalAcceleration>(GetArenaNoVirtual());
    longitudinal_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.longitudinal_acceleration)
  return longitudinal_acceleration_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_longitudinal_acceleration(::LongitudinalAcceleration* longitudinal_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(longitudinal_acceleration_);
  }
  if (longitudinal_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      longitudinal_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, longitudinal_acceleration, submessage_arena);
    }
    set_has_longitudinal_acceleration();
  } else {
    clear_has_longitudinal_acceleration();
  }
  longitudinal_acceleration_ = longitudinal_acceleration;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.longitudinal_acceleration)
}

// required .Curvature curvature = 7;
inline bool BasicVehicleContainerHighFrequency::has_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Curvature& BasicVehicleContainerHighFrequency::_internal_curvature() const {
  return *curvature_;
}
inline const ::Curvature& BasicVehicleContainerHighFrequency::curvature() const {
  const ::Curvature* p = curvature_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.curvature)
  return p != NULL ? *p : *reinterpret_cast<const ::Curvature*>(
      &::_Curvature_default_instance_);
}
inline ::Curvature* BasicVehicleContainerHighFrequency::release_curvature() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.curvature)
  clear_has_curvature();
  ::Curvature* temp = curvature_;
  curvature_ = NULL;
  return temp;
}
inline ::Curvature* BasicVehicleContainerHighFrequency::mutable_curvature() {
  set_has_curvature();
  if (curvature_ == NULL) {
    auto* p = CreateMaybeMessage<::Curvature>(GetArenaNoVirtual());
    curvature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.curvature)
  return curvature_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_curvature(::Curvature* curvature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(curvature_);
  }
  if (curvature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      curvature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curvature, submessage_arena);
    }
    set_has_curvature();
  } else {
    clear_has_curvature();
  }
  curvature_ = curvature;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.curvature)
}

// required .CurvatureCalculationMode curvature_calculation_mode = 8;
inline bool BasicVehicleContainerHighFrequency::has_curvature_calculation_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_curvature_calculation_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_curvature_calculation_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BasicVehicleContainerHighFrequency::clear_curvature_calculation_mode() {
  curvature_calculation_mode_ = 0;
  clear_has_curvature_calculation_mode();
}
inline ::CurvatureCalculationMode BasicVehicleContainerHighFrequency::curvature_calculation_mode() const {
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.curvature_calculation_mode)
  return static_cast< ::CurvatureCalculationMode >(curvature_calculation_mode_);
}
inline void BasicVehicleContainerHighFrequency::set_curvature_calculation_mode(::CurvatureCalculationMode value) {
  assert(::CurvatureCalculationMode_IsValid(value));
  set_has_curvature_calculation_mode();
  curvature_calculation_mode_ = value;
  // @@protoc_insertion_point(field_set:BasicVehicleContainerHighFrequency.curvature_calculation_mode)
}

// required .YawRate yaw_rate = 9;
inline bool BasicVehicleContainerHighFrequency::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BasicVehicleContainerHighFrequency::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BasicVehicleContainerHighFrequency::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::YawRate& BasicVehicleContainerHighFrequency::_internal_yaw_rate() const {
  return *yaw_rate_;
}
inline const ::YawRate& BasicVehicleContainerHighFrequency::yaw_rate() const {
  const ::YawRate* p = yaw_rate_;
  // @@protoc_insertion_point(field_get:BasicVehicleContainerHighFrequency.yaw_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::YawRate*>(
      &::_YawRate_default_instance_);
}
inline ::YawRate* BasicVehicleContainerHighFrequency::release_yaw_rate() {
  // @@protoc_insertion_point(field_release:BasicVehicleContainerHighFrequency.yaw_rate)
  clear_has_yaw_rate();
  ::YawRate* temp = yaw_rate_;
  yaw_rate_ = NULL;
  return temp;
}
inline ::YawRate* BasicVehicleContainerHighFrequency::mutable_yaw_rate() {
  set_has_yaw_rate();
  if (yaw_rate_ == NULL) {
    auto* p = CreateMaybeMessage<::YawRate>(GetArenaNoVirtual());
    yaw_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasicVehicleContainerHighFrequency.yaw_rate)
  return yaw_rate_;
}
inline void BasicVehicleContainerHighFrequency::set_allocated_yaw_rate(::YawRate* yaw_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(yaw_rate_);
  }
  if (yaw_rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yaw_rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yaw_rate, submessage_arena);
    }
    set_has_yaw_rate();
  } else {
    clear_has_yaw_rate();
  }
  yaw_rate_ = yaw_rate;
  // @@protoc_insertion_point(field_set_allocated:BasicVehicleContainerHighFrequency.yaw_rate)
}

// -------------------------------------------------------------------

// BasicVehicleContainerLowFrequency

// optional uint32 temp2 = 1;
inline bool BasicVehicleContainerLowFrequency::has_temp2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicVehicleContainerLowFrequency::set_has_temp2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicVehicleContainerLowFrequency::clear_has_temp2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicVehicleContainerLowFrequency::clear_temp2() {
  temp2_ = 0u;
  clear_has_temp2();
}
inline ::google::protobuf::uint32 BasicVehicleContainerLowFrequency::temp2() const {
  // @@protoc_insertion_point(field_get:BasicVehicleContainerLowFrequency.temp2)
  return temp2_;
}
inline void BasicVehicleContainerLowFrequency::set_temp2(::google::protobuf::uint32 value) {
  set_has_temp2();
  temp2_ = value;
  // @@protoc_insertion_point(field_set:BasicVehicleContainerLowFrequency.temp2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cam_5finterface_2eproto
